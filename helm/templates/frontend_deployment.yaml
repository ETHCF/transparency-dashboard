{{- $fullname := include "fullname" . -}}
{{- $dashboard := .Values.dashboard -}}
{{- $name := printf "%s-dashboard" $fullname -}}
{{- $chart := include "chart" . -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  namespace: {{ $.Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    helm.sh/chart: {{ $chart }}
    {{- if $dashboard.additionalLabels}}
{{ toYaml $dashboard.additionalLabels | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ default 1 $dashboard.autoscaler.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $name }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        app.kubernetes.io/managed-by: {{ $.Release.Service }}
        helm.sh/chart: {{ $chart }}
        {{- if $dashboard.additionalLabels}}
{{ toYaml $dashboard.additionalLabels | nindent 8 }}
        {{- end }}
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
        fsGroup: 1001
      containers:
        - name: dashboard
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 1001
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          image: "{{ $dashboard.image.registry }}/{{ $dashboard.image.repository }}:{{ $dashboard.image.tag }}"
          imagePullPolicy: {{ $dashboard.image.pullPolicy }}
          {{- if $dashboard.command }}
          command: [{{ $dashboard.command }}]
          {{- if $dashboard.args }}
          args: {{- range $dashboard.args }}
            - {{.}}
            {{- end }}
          {{- end }}
          {{- end }}
          env:
          {{- if $dashboard.env }}
          {{- toYaml $dashboard.env | indent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            {{- toYaml $dashboard.resources | nindent 14 }}
          volumeMounts:
          - name: config
            mountPath: /etc/nginx/conf.d/
            subPath: default.conf
            readOnly: true
      volumes:
      - name: config
        configMap:
          name: {{ $name }}
